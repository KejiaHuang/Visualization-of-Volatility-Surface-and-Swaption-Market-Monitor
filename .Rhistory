date<-as.Date(input$date_new)
date<-as.Date("2016-7-14")
discount_factor<-as.numeric(yield_curve(date,yield_data))
plot_ly(x=Time,y=discount_factor,type = 'scatter', mode = 'lines')%>%
layout(title = paste0("Yield curve on Date: ",date))
t<-seq(from = 6 , to = 360 ,by = 6)
date<-as.Date("2016-7-14")
discount_factor<-as.numeric(yield_curve(date,yield_data))
plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines')%>%
layout(title = paste0("Yield curve on Date: ",date))
Time
for(i in t){
i<-paste0(x,"M")
}
t
Time<-c()
for(i in 1:length(t)){
Time[i]<-paste0(t[i],"M")
}
Time
plot_ly(x=Time,y=discount_factor,type = 'scatter', mode = 'lines')%>%
layout(title = paste0("Yield curve on Date: ",date))
plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines')%>%
layout(title = paste0("Yield curve on Date: ",date),
xlab= Time)
plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines')%>%
layout(title = paste0("Yield curve on Date: ",date),
xaxis= Time)
t<-seq(from = 6 , to = 360 ,by = 6)
Time<-c()
for(i in 1:length(t)){
Time[i]<-paste0(t[i],"M")
}
date<-as.Date("2016-7-14")
discount_factor<-as.numeric(yield_curve(date,yield_data))
plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines',levels =Time)%>%
layout(title = paste0("Yield curve on Date: ",date))
as.factor(Time)
plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines',levels =as.factor(Time))%>%
layout(title = paste0("Yield curve on Date: ",date))
plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines',levels =as.factor(Time))%>%
layout(title = paste0("Yield curve on Date: ",date),
scene = list(
xaxis = list(title = "Month"),
yaxis = list(title = "Discount factor")))
plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines',levels =as.factor(Time))%>%
layout(
title = paste0("Yield Curve on Date: ",date),
scene = list(
xaxis = list(title = "Month"),
yaxis = list(title = "Discount factor")))
plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines')%>%
layout(
title = paste0("Yield Curve on Date: ",date),
scene = list(
xaxis = list(title = "Month"),
yaxis = list(title = "Discount factor")))
p<-plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines')%>%
layout(
title = paste0("Yield Curve on Date: ",date),
scene = list(
xaxis = list(title = "Month"),
yaxis = list(title = "Discount factor")))
p
library(plotly)
p<-plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines')%>%
layout(
title = paste0("Yield Curve on Date: ",date),
scene = list(
xaxis = list(title = "Month"),
yaxis = list(title = "Discount factor")))
p
runApp()
p<-plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines')%>%
add_trace(x=t,y=discount_factor_to)
date_to<-date+1
discount_factor_to<-as.numeric(yield_curve(date_to,yield_data))
p<-plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines')%>%
add_trace(x=t,y=discount_factor_to)
p<-plot_ly(x=t,y=discount_factor,type = 'scatter', mode = 'lines')%>%
add_trace(x=t,y=discount_factor_to)%>%
layout(
title = paste0("Yield Curve on Date: ",date),
scene = list(
xaxis = list(title = "Month"),
yaxis = list(title = "Discount factor")))
p
p<-plot_ly(x=t,y=discount_factor,type = 'scatter',name=date, mode = 'lines')%>%
add_trace(x=t,y=discount_factor_to,name=date_to)%>%
layout(
title = paste0("Yield Curve on Date: ",date),
scene = list(
xaxis = list(title = "Month"),
yaxis = list(title = "Discount factor")))
p
runApp()
options(warn = -1)
setwd("D:\\Stevens\\FE 800\\Our project\\666shiny\\version_2.0")
library(shiny)
library(plotly)
library(shinydashboard)
library(lubridate)
Vols_data<-read.csv("Swaption_vols.csv")
Strikes_data<-read.csv("Swaption_strikes.csv")
yield_curve<-function(date,yield_data){
yield_c<-yield_data[as.Date(yield_data$Date)==as.Date(date),]
yield_c<-yield_c[,-1]
return(yield_c)
}
date<-"2016-4-21"
which(yield_data$Date)==as.Date(date))
which(as.Date(yield_data$Date)==as.Date(date))
yield_data<-read.csv("yield_curve.csv")
which(as.Date(yield_data$Date)==as.Date(date))
yield_curve
runApp()
runApp()
runApp()
date<-as.Date("2016/4/21")
date=="Saturday"
date==as.Date("Saturday")
date==weekdays("Thu")
date==weekdays()
weekdays(date)
weekdays(date)=="Thursday"
date<-as.Date("2016/4/22")
weekdays(date)=="Thursday"
weekdays(date)
date<-as.Date("2016/4/23")
weekdays(date)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(warn = -1)
setwd("D:\\Stevens\\FE 800\\Our project\\666shiny\\version_2.0")
library(shiny)
library(plotly)
library(shinydashboard)
library(lubridate)
Vols_data<-read.csv("Swaption_vols.csv")
Strikes_data<-read.csv("Swaption_strikes.csv")
load_data<-function(date,Vols_data,Strikes_data){
# vol_data[vol_data$Date=="2016/1/1",]
# date<-"2016/1/1"; Vols_data<-vol_data; Strikes_data<-K_data
vols<-Vols_data[as.Date(Vols_data$Date)==as.Date(date),]
vols<-vols[,-1]
vols<-matrix(unlist(vols),nrow = 15, ncol = 18, byrow = FALSE )#
vols<-t(vols)
strikes<-Strikes_data[as.Date(Strikes_data$Date)==as.Date(date),]
strikes<-strikes[,-1]
strikes<-matrix(unlist(strikes),nrow = 15, ncol = 18, byrow = FALSE )#
strikes<-t(strikes)
return(list(vols,strikes))
}
SABRVol<-function(alpha,beta,rho,nu,T,f,K){
# if(f==K){
Denom<- f^(1-beta)
Term1<- 1+(((1-beta)^2)/24*(alpha^2)/(f^(2-2*beta))+1/4*(rho*beta*nu*alpha)/(f^(1-beta))+(2-3*rho^2)/24*nu^2)*T
return(alpha/Denom*Term1)
# }
#
# else{
#   z<-nu/alpha*((f*K)^(1-beta)/2)*log(f/K)
#   X<-function(z){
#     return(log((sqrt(1-2*rho*z+z^2)+z-rho)/(1-rho)))
#   }
#   Denom <-(f*K)^((1-beta)/2)*(1+((1-beta)^2)/24*log(f/K)^2+((1-beta)^4)/1920*log(f/K)^4)
#   Term1<- 1+(((1-beta)^2)/24*alpha^2/((f*K)^(1-beta))+1/4*(rho*beta*nu*alpha)/((f*K)^((1-beta)/2))+(2-3*rho^2)/24*nu^2)*T
#   return(alpha/Denom*Term1*z/X(z))
# }
#
}
FitSABR<-function(beta,fATM,K,t,obvols,
init.values = c(10, 0, 3),
lower.bound = c(0.00, -1, 0.0001),
upper.bound = c(100, 1, 100)){
#beta=0.5;  fATM=K_data[1,]; K=K_data[1,]; t=Ex[,1]; obvols=test_data;
obj<-function(parm,beta,fATM,K,t,obvols){
#alpha<-0.11;rho=-0.2;nu=2;
alpha<-parm[1]
rho<-parm[2]
nu<-parm[3]
ESvols<-SABRVol(alpha=alpha,beta=beta,rho=rho,nu=nu,T=t,f=fATM,K=K)
return(sum((obvols-ESvols)^2))
}
#obj(c(0.11,-0.2,2),beta,fATM,K,t,obvols)
#
opt<-nlminb(start=init.values,
objective = obj,
lower = lower.bound,
upper = upper.bound,
beta=beta,
fATM=fATM,
K=K,
t=t,
obvols=obvols)
parms<-opt$par
names(parms) <- c("alpha", "rho", "nu")
obj <- opt$objective
# opt<-optim(par=c(0, 0, 1),obj,beta=beta,fATM=fATM,K=K,t=t,obvols=obvols)
ESvols<-SABRVol(alpha=parms[1],beta=0.5,rho=parms[2],nu=parms[3],T=t,f=fATM,K=K)
#ESvols-obvols
return(list(parms=parms,  estvols=ESvols,  obsvols=obvols,
obj=obj))
}
#input date
date<-"2016/7/14"
data<-load_data(date,Vols_data,Strikes_data)
vol_data_today<-t(as.data.frame(data[1]))/100
K_data_today<-t(as.data.frame(data[2]))/100
tenor<- c(1,2,3,4,5,6,7,8,9,10,12,15,20,25,30)
Ex <-c(1/12,3/12,6/12,9/12,1,2,3,4,5,6,7,8,9,10,15,20,25,30)
expiry<-c(1/12,3/12,6/12,9/12,1,2,3,4,5,6,7,8,9,10,15,20,25,30)
load_data30<-function(date,Vols_data,Strikes_data){
# vol_data[vol_data$Date=="2016/1/1",]
# date<-"2016/1/1"; Vols_data<-vol_data; Strikes_data<-K_data
vols<-Vols_data[as.Date(Vols_data$Date)==as.Date(date),]
location <- which(as.Date(Vols_data$Date)==as.Date(date))
vols_sum<-Vols_data[(location-30):(location-1),-1]/100
strikes_sum<- Strikes_data[(location-30):(location-1),-1]/100
return(list(vols_sum,strikes_sum))
}
row_Sabr<-function(i,vols_data30,strikes_data30){
row_data_vol<-vols_data30[i,]
row_data_K<-strikes_data30[i,]
vols<-matrix(unlist(row_data_vol),nrow = 15, ncol = 18, byrow = FALSE )#
strikes<-matrix(unlist(row_data_K),nrow = 15, ncol = 18, byrow = FALSE )#
parms<-matrix(nrow=15,ncol=3)
SABR_vols<-t(apply(matrix(c(1:15),nrow=15),1,apply_row_Sabr<-function(i){
parms[i,]<-FitSABR(0.5,strikes[i,],strikes[i,],Ex,vols[i,])$par
SABR_vols<-matrix(nrow=15,ncol=18)
SABR_vols[i,]<-SABRVol(parms[i,1],0.5,parms[i,2],parms[i,3],Ex,strikes[i,],strikes[i,])
return(SABR_vols[i,])
}))
SABR_vols<-split(t(SABR_vols), rep(1))[[1]]
return(SABR_vols)
}
up_limit_new <- function(vol,c){
# test data
# vol <- Vols_data[,1]
alpha<-(1-c)/2
ci<-abs(qnorm(alpha))
mean <- mean(as.numeric(vol))
sd  <-sd(as.numeric(vol))
up_result <- mean + ci * sd
return(up_result)
}
low_limit_new <- function(vol,c){
# test data
# vol <- Vols_data[,1]
# c<-0.95
alpha<-(1-c)/2
ci<-abs(qnorm(alpha))
mean <- mean(as.numeric(vol))
sd  <-sd(as.numeric(vol))
low_result <- mean - ci * sd
return(low_result)
}
data_30<-load_data30(date,Vols_data ,Strikes_data)
vols_data30<-data_30[[1]]
strikes_data30<-data_30[[2]]
SABR_30_test<-t(apply(matrix(c(1:30),nrow=30),1,row_Sabr,vols_data30,strikes_data30))
#input c
c<-0.95
upper_limit_test <- apply(SABR_30_test,2,up_limit_new,c)
lower_limit <- apply(SABR_30,2,low_limit_new,c)
upper_limit<-matrix(unlist(upper_limit),nrow = 15, ncol = 18, byrow = FALSE )#
lower_limit<-matrix(unlist(lower_limit),nrow = 15, ncol = 18, byrow = FALSE )#
upper_marks<-vol_data_today>upper_limit
lower_marks<-vol_data_today<lower_limit
upper_matrix<-matrix(nrow=15,ncol=18)
lower_matrix<-matrix(nrow=15,ncol=18)
for(i in 1:nrow(vol_data_today)){
for(j in 1:ncol(vol_data_today)){
if(upper_marks[i,j]){
upper_matrix[i,j]=vol_data_today[i,j]
}
if(lower_marks[i,j]){
lower_matrix[i,j]=vol_data_today[i,j]
}
}
}
upper <- round(upper_matrix*100,digits = 2)
lower <- round(lower_matrix*100,digits = 2)
####################
SABR_Volatilities<-matrix(nrow=nrow(vol_data_today),ncol=ncol(vol_data_today))
for(i in 1:15){
SABR<-FitSABR(0.5,K_data_today[i,],K_data_today[i,],Ex,vol_data_today[i,])
SABR_Volatilities[i,]<-SABR$estvols
}
tenor_plus<-c()
for(i in tenor){
# i = tenor[1]
tenor_plus<-c(tenor_plus,rep(i,18))
}
#plotly first plot----
p<-plot_ly(x =  expiry, y =tenor  , z =SABR_Volatilities*100, type = "surface",showscale = FALSE)%>%
layout(showlegend = TRUE)%>%
# add_surface(p,x=tenor,y=rep(expiry[16],15),z=as.matrix(ob_vols[,16]*100),type="surface")%>%
add_markers(x = rep(expiry,15), y = tenor_plus ,z = as.numeric(split(t(upper), rep(1))[[1]]),
mode="markers",name="Upper")%>%
add_markers(x = rep(expiry,15), y = tenor_plus ,z = as.numeric(split(t(lower), rep(1))[[1]]),
mode="markers",name="Lower")%>%
layout(title = paste0("Swaption Volatilities ",date),
scene = list(
xaxis = list(title = "Expiry"),
yaxis = list(title = "Tenor"),
zaxis = list(title = "Vols")))
p
#ggplot data prepare----
EX_char <- c(1/12,3/12,6/12,9/12,1,2,3,4,5,6,7,8,9,10,15,20,25,30)
EX_char <- as.factor(EX_char)
Ex_char_plus <- rep(EX_char,15)
tenor_char <-c(1,2,3,4,5,6,7,8,9,10,12,15,20,25,30)
tenor_char <- as.factor(tenor_char)
tenor_char_plus<-c()
for(i in tenor_char){
tenor_char_plus<-c(tenor_char_plus,rep(i,18))
}
upper_plot<-split(t(upper), rep(1))[[1]]
lower_plot<-split(t(lower), rep(1))[[1]]
upper_lower<-c(upper_plot,lower_plot)
upper_lower<-as.data.frame(upper_lower)
Ex_char_plus<-as.data.frame(rep(Ex_char_plus,2))
tenor_char_plus<-as.data.frame(rep(tenor_char_plus,2))
col_flag <- as.data.frame(c(rep(1,270),rep(2,270)))
upper_lower_plot <- cbind(upper_lower,Ex_char_plus,tenor_char_plus,col_flag)
upper_lower_plot <- as.data.frame(upper_lower_plot)
colnames(upper_lower_plot) <- c("df_upperlower","df_Ex","df_tenor","df_color")
#ggplot---------
ggplot(  upper_lower_plot, aes(x=df_Ex, y=df_tenor)) +
geom_tile( fill= "white", color = "white") +
geom_text(aes(label=df_upperlower, color=  df_color<1.5)) +
scale_color_manual( name= "Legend",labels=c("Lower","Upper"),values=c("green", "red")) +
# scale_fill_manual(labels = c("FALSE" = "Sell", "TRUE" = "Buy"),
#                   values = c('red', 'green')) +
scale_y_discrete(name ="Tenor",
limits=c("1","2","3","4","5","6","7","8","9","10","12","15","20","25","30"),
labels=c("1Y","2Y","3Y","4Y","5Y","6Y","7Y","8Y","9Y","10Y","12Y","15Y","20Y","25Y","30Y"))+
scale_x_discrete(name="Expriy",breaks=as.factor(c(1/12,3/12,6/12,9/12,1,2,3,4,5,6,7,8,9,10,15,20,25,30)),
labels=c("1M","3M","6M","9M","1Y","2Y","3Y","4Y","5Y","6Y","7Y","8Y","9Y","10Y","15Y","20Y","25Y","30Y"))+
theme(axis.text = element_text(face = "bold")) +
ggtitle(
paste0(
"Trading suggestions on ",date," with Confidence interval ",c*100,"%")
)
#tomorrow data-----
data_tomorrow <- function(date,Vols_data,Strikes_data){
location <- which(as.Date(Vols_data$Date)==as.Date(date))+1
vols_sum<-Vols_data[location,-1]
strikes_sum<- Strikes_data[location,-1]
return(list(vols_sum,strikes_sum))
}
tomorrow_data<-data_tomorrow(date,Vols_data,Strikes_data)
vols_tomorrow<-tomorrow_data[[1]]/100
strikes_tomorrow<-tomorrow_data[[2]]/100
vols_tomorrow<-matrix(unlist(vols_tomorrow),nrow = 15, ncol = 18, byrow = FALSE )#
strikes_tomorrow<-matrix(unlist(strikes_tomorrow),nrow = 15, ncol = 18, byrow = FALSE )#
# if(date_tomorrow==())
tom_upper_vols<-matrix(nrow=15,ncol=18)
tom_upper_k<-matrix(nrow=15,ncol=18)
tom_lower_vols<-matrix(nrow=15,ncol=18)
tom_lower_k<-matrix(nrow=15,ncol=18)
today_upper_vols<-matrix(nrow=15,ncol=18)
today_upper_k<-matrix(nrow=15,ncol=18)
today_lower_vols<-matrix(nrow=15,ncol=18)
today_lower_k<-matrix(nrow=15,ncol=18)
for(i in 1:nrow(vols_tomorrow)){
for(j in 1:ncol(vols_tomorrow)){
if(upper_marks[i,j]){
tom_upper_vols[i,j]=vols_tomorrow[i,j]
tom_upper_k[i,j]=strikes_tomorrow[i,j]
today_upper_vols[i,j]=vol_data_today[i,j]
today_upper_k[i,j]=K_data_today[i,j]
}
if(lower_marks[i,j]){
tom_lower_vols[i,j]=vols_tomorrow[i,j]
tom_lower_k[i,j]=strikes_tomorrow[i,j]
today_lower_vols[i,j]=vol_data_today[i,j]
today_lower_k[i,j]=K_data_today[i,j]
}
}
}
####Swaption BS
yield_curve <- function(){
r<-function(t){
if(0<=t&&t<10){
r<-0.05
return(r)
}
else if(10<=t&&t<30){
r<-0.06
return(r)}
else{
r<-0.07
return(r)
}
}
#r<-0.05
yield_curve_temp<-seq(from = 0 , to = 60 ,by = 1/12)
yield_curve_temp<-exp(-r(yield_curve_temp)*yield_curve_temp)
return(yield_curve_temp)
}
BS_Swaption<-function(S,K,ts,T,sigma,yield_curve){
#S<-0.12;K<-0.12;ts<-1.5;T<-10;sigma<-0.5
dt<-1/12
time_sires<-seq(from = 0 , to = 60 ,by = 1/12)
loc_ts<-which(time_sires==ts)
loc_T<-which(time_sires==T)
df<-yield_curve[loc_ts:loc_T]
DV01<-sum(df)*dt
d1<-(log(S/K)+sigma^2*ts/2)/(sigma*sqrt(ts))
d2<-d1-sigma*sqrt(ts)
swaption<-DV01*(S*pnorm(d1)-K*pnorm(d2))
return(swaption)
}
BS_Swaption(S<-0.12,K<-0.12,ts<-1.5,T<-10,sigma<-0.5,yield_curve_1)
calculate_bs <- function(vol,strike){
#vol<-today_upper_vols; strike<-today_upper_k
price<-matrix(nrow=15,ncol=18)
tenor<- c(1,2,3,4,5,6,7,8,9,10,12,15,20,25,30)
Ex <-c(1/12,3/12,6/12,9/12,1,2,3,4,5,6,7,8,9,10,15,20,25,30)
yield_curve_temp <- yield_curve()
for(i in 1:15){
for(j in 1:18){
if(!is.na(vol[i,j])){
price[i,j]<-BS_Swaption(strike[i,j],strike[i,j],Ex[j],tenor[i],vol[i,j],yield_curve_temp)
}
}
}
return(price)
}
today_upper_price<-calculate_bs(today_upper_vols,today_upper_k)
today_lower_price<-calculate_bs(today_lower_vols,today_lower_k)
tomorrow_upper_price<-calculate_bs(tom_upper_vols,tom_upper_k)
tomorrow_lower_price<-calculate_bs(tom_lower_vols,tom_lower_k)
upper_price_sum<-today_upper_price-tomorrow_upper_price
lower_price_sum<-tomorrow_lower_price-today_lower_price
today_cap_sum <- today_upper_price + today_upper_price
today_cap_sum[is.na(today_cap_sum)]=0
upper_price_sum[is.na(upper_price_sum)]=0
lower_price_sum[is.na(lower_price_sum)]=0
(sum(upper_price_sum)+sum(lower_price_sum))/sum(today_cap_sum)*100
upper_price_sum
upper_price_sum<-today_upper_price-tomorrow_upper_price
upper_price_sum
length(upper_price_sum)
dim(upper_price_sum)
len(upper_price_sum)
length(upper_price_sum[!is.na(upper_price_sum)])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a<-matrix(c(1,2,3,4,5,6,7,8),nrow=2,ncol=4)
a
b<-matrix(c(1,0.5,2,2,1,0.5,2,1),nrow=2,ncol=4)
b
a/b
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
